"""modify users and create user_refresh_tokens

Revision ID: 669b3735c944
Revises: 6b29f4007a05
Create Date: 2025-06-04 15:43:30.755911

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '669b3735c944'
down_revision: Union[str, None] = '6b29f4007a05'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.add_column('users', sa.Column('iam_subject_id', sa.String(), nullable=True))
    op.create_index(op.f('ix_users_iam_subject_id'), 'users', ['iam_subject_id'], unique=True)

    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)
    try:
        # Select users that don't have an iam_subject_id yet
        users_to_update = session.execute(
            sa.text("SELECT id FROM users WHERE iam_subject_id IS NULL")
        ).fetchall()

        for user_row in users_to_update:
            user_id = user_row[0]
            placeholder_iam_sub = f"placeholder_iam_sub_for_user_{user_id}"
            session.execute(
                sa.text("UPDATE users SET iam_subject_id = :iam_sub WHERE id = :uid"),
                {"iam_sub": placeholder_iam_sub, "uid": user_id}
            )
        session.commit()
    except Exception as e:
        session.rollback()
        print(f"Error populating iam_subject_id: {e}")
        raise
    finally:
        session.close()

    op.alter_column('users', 'iam_subject_id', existing_type=sa.String(), nullable=False)

    # op.drop_column('users', 'first_name')
    # op.drop_column('users', 'last_name')
    # op.drop_column('users', 'first_login_at')

    # Create user_refresh_tokens table
    op.create_table('user_refresh_tokens',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('iam_provider_name', sa.String(), nullable=False, server_default='ctao'),
        sa.Column('encrypted_refresh_token', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_refresh_tokens_id'), 'user_refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_user_refresh_tokens_user_id'), 'user_refresh_tokens', ['user_id'], unique=False) # Index for user_id

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_refresh_tokens_user_id'), table_name='user_refresh_tokens')
    op.drop_index(op.f('ix_user_refresh_tokens_id'), table_name='user_refresh_tokens')
    op.drop_table('user_refresh_tokens')

    op.alter_column('users', 'iam_subject_id', existing_type=sa.String(), nullable=True) # Make nullable first
    op.drop_index(op.f('ix_users_iam_subject_id'), table_name='users')
    op.drop_column('users', 'iam_subject_id')

    # ### end Alembic commands ###
